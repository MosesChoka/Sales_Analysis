arrange(desc(max_single_order))
View(sales_ordered2)
# Filter the original data with the obtained highest purchse for ID, and identify who purchased the product and its name
customer_most_purchase2 <- westData %>%
filter(Product.ID == 'TEC-CO-10004722') %>%
select(Customer.Name, Product.Name, Sales, order_date)%>%
slice_max(Sales)
customer_most_purchase2
#load from CSV
centralData <- read.csv("Orders_Central.csv", header=TRUE)
View(centralData)
westData <- read.csv("orders_west.csv", header=TRUE)
View(westData)
eastData <- read.delim("Orders_East.txt", header=TRUE, sep='\t')
View(eastData)
# Look at the structure of the three datasets
str(centralData)
# Look at the structure of the three datasets
dim(centralData)
colnames(centralData)
# Look at the structure of the three datasets
# Central data
dim(centralData)
colnames(centralData)
# West Data
dim(centralData)
colnames(westData)
# East Data
dim(eastData)
colnames(eastData)
# Look at the structure of the three datasets
# Central data
dim(centralData)
colnames(centralData)
# West Data
dim(westData)
colnames(westData)
# East Data
dim(eastData)
colnames(eastData)
# Remove duplicate values from the datasets
centralData <- centralData %>%
distinct(.keep_all = TRUE)
library(tidyr)
library(tidyverse)
# Remove duplicate values from the datasets
centralData <- centralData %>%
distinct(.keep_all = TRUE)
westData <- westData %>%
distinct(.keep_all = TRUE)
eastData <- eastData %>%
distinct(.keep_all = TRUE)
nrow(centralData)
dim(centralData)
dim(westData)
dim(eastData)
library(tidyr)
library(tidyverse)
#load from CSV
centralData <- read.csv("Orders_Central.csv", header=TRUE)
westData <- read.csv("orders_west.csv", header=TRUE)
eastData <- read.delim("Orders_East.txt", header=TRUE, sep='\t')
# Look at the structure of the three datasets
# Central data
dim(centralData)
colnames(centralData)
# West Data
dim(westData)
colnames(westData)
# East Data
dim(eastData)
colnames(eastData)
# Remove duplicate values from the datasets
centralData <- unique(centralData)
# Check the resulting rows after removing duplicates
dim(centralData)
westData <- unique(westData)
dim(westData)
eastData <- unique(eastData)
dim(eastData)
# Remove duplicate values from the datasets
centralData <- unique(centralData)
westData <- unique(westData)
eastData <- unique(eastData)
# Check the resulting rows after removing duplicates
dim(centralData)
dim(westData)
dim(eastData)
# Further inspection on the datasets column (Making the data consistent)
colnames(centralData)
centralData <- centralData %>%
unite("Order.Date", Order.Year, Order.Month, Order.Day, sep = "-")
centralData <- centralData %>%
unite("Ship.Date", Ship.Year, Ship.Month, Ship.Day, sep = "-")
# Convert the Order and Shipping Dates to Date variable
centralData$Order.Date <- as.Date(centralData$Order.Date, format = "%Y-%m-%d")
centralData$Ship.Date <- as.Date(centralData$Ship.Date, format = "%Y-%m-%d")
westData$Order.Date <- sub(" [0-9:]+$", "", westData$Order.Date)
westData$Ship.Date <- sub(" [0-9:]+$", "", westData$Ship.Date)
# Convert to the Ship  and Order Dates to date
westData$Order.Date <- as.Date(westData$Order.Date)
# Convert to the Ship  and Order Dates to date
westData$Order.Date <- as.Date(westData$Order.Date)
westData$Ship.Date <- as.Date(westData$Ship.Date)
centralData$Ship.Date <- as.Date(centralData$Ship.Date, format = "%Y-%m-%d")
westData$Ship.Date <- sub(" [0-9:]+$", "", westData$Ship.Date)
westData$Ship.Date <- as.Date(westData$Ship.Date)
westData$Order.Date <- as.Date(westData$Order.Date, format = "%m/%d/%Y")
westData$Ship.Date <- as.Date(westData$Ship.Date, format = "%m/%d/%Y")
# Remove the 0:00 from the order date and shipping date columns
eastData$Order.Date <- sub(" [0-9:]+$", "", eastData$Order.Date)
eastData$Ship.Date <- sub(" [0-9:]+$", "", eastData$Ship.Date)
# Convert to the Ship  and Order Dates to date
eastData$Order.Date <- as.Date(eastData$Order.Date, format = "%m/%d/%Y")
eastData$Ship.Date <- as.Date(eastData$Ship.Date, format = "%m/%d/%Y")
ncol(centralData)
ncol(westData)
ncol(eastData)
# Add  Region column to central data
centralData$Region <- "Central"
centralData <- rename(centralData, Product.Name = Product)
centralData <- rename(centralData, Discount = Discounts)
# East Region has some inconsistency on the Sales column, we'll need to remove the USD to remain with the numeric values only
eastData$Sales <- as.numeric(str_replace(eastData$Sales, "USD", ""))
head(eastData$Sales,2)
ncol(centralData)
ncol(eastData)
# Let's select the 21 variables in both east and central region to make up the west region
westData <- westData %>%
select(Row.ID, Order.ID, Customer.ID, Customer.Name, Segment, City, Right_State2,
Postal.Code, Product.ID, Category, Sub.Category, Product.Name, Sales, Quantity, Profit,
Order.Date, Ship.Date, Ship.Mode, Discount, Region)
ncol(westData)
# Let's select the 21 variables in both east and central region to make up the west region
westData <- westData %>%
select(Right_Row.ID, Order.ID, Customer.ID, Customer.Name, Segment, City, Right_State2,
Postal.Code, Product.ID, Category, Sub.Category, Product.Name, Sales, Quantity, Profit,
Order.Date, Ship.Date, Ship.Mode, Discount, Region)
westData <- read.csv("orders_west.csv", header=TRUE)
# West Data
dim(westData)
colnames(westData)
westData <- unique(westData)
dim(westData)
# B. West Region
# Remove the 0:00 from the order date and shipping date columns
westData$Order.Date <- sub(" [0-9:]+$", "", westData$Order.Date)
westData$Ship.Date <- sub(" [0-9:]+$", "", westData$Ship.Date)
# Convert to the Ship  and Order Dates to date
westData$Order.Date <- as.Date(westData$Order.Date, format = "%m/%d/%Y")
westData$Ship.Date <- as.Date(westData$Ship.Date, format = "%m/%d/%Y")
# Let's select the 21 variables in both east and central region to make up the west region
westData <- westData %>%
select(Right_Row.ID, Order.ID, Customer.ID, Customer.Name, Segment, City, Right_State2,
Postal.Code, Product.ID, Category, Sub.Category, Product.Name, Sales, Quantity, Profit,
Order.Date, Ship.Date, Ship.Mode, Discount, Region)
ncol(westData)
westData <- read.csv("orders_west.csv", header=TRUE)
# West Data
dim(westData)
colnames(westData)
westData <- unique(westData)
dim(westData)
westData$Order.Date <- sub(" [0-9:]+$", "", westData$Order.Date)
westData$Ship.Date <- sub(" [0-9:]+$", "", westData$Ship.Date)
# Convert to the Ship  and Order Dates to date
westData$Order.Date <- as.Date(westData$Order.Date, format = "%m/%d/%Y")
westData$Ship.Date <- as.Date(westData$Ship.Date, format = "%m/%d/%Y")
# Let's select the 21 variables in both east and central region to make up the west region
westData <- westData %>%
select(Row.ID, Order.ID, Customer.ID, Customer.Name, Segment,Country, City, Right_State2,
Postal.Code, Product.ID, Category, Sub.Category, Product.Name, Sales, Quantity, Profit,
Order.Date, Ship.Date, Ship.Mode, Discount, Region)
ncol(westData)
westData <- rename(westData, State = Right_State2)
ncol(westData)
# Save the new unique values for west data
nrow(westData)
westData <- unique(westData)
dim(westData)
# Check the resulting rows after removing duplicates
dim(centralData)
order_c <- c("Row.ID", "Order.ID", "Customer.ID", "Customer.Name", "Segment","Country", "City", "Right_State2","Postal.Code","Product.ID","Category","Sub.Category","Product.Name","Sales","Quantity", "Profit","Order.Date", "Ship.Date", "Ship.Mode", "Discount", "Region")
eastData <- eastData[,order_c]
order_c <- c("Row.ID", "Order.ID", "Customer.ID", "Customer.Name", "Segment","Country", "City", "State","Postal.Code","Product.ID","Category","Sub.Category","Product.Name","Sales","Quantity", "Profit","Order.Date", "Ship.Date", "Ship.Mode", "Discount", "Region")
eastData <- eastData[,order_c]
# Merge the datasets
merged_data <- rbind(centralData, westData, eastData)
dim(merged_data)
head(merged_data)
merged_data <- merged_data%>%
arrange(Row.ID)
head(merged_data)
# Merge the datasets
merged_data1 <- rbind(centralData, eastData, westData)
dim(merged_data1)
merged_data1 <- merged_data1%>%
arrange(Row.ID)
head(merged_data1)
centralData <- centralData[,order_c]
# Merge the datasets
merged_set <- rbind(centralData, eastData, westData)
dim(merged_set)
merged_set <- merged_set%>%
arrange(Row.ID)
head(merged_set)
#Check for missing values in our merged dataset
any(is.na(merged_set))
# Check for missing values in each column
colSums(is.na(merged_set))
nrow(eastData)
nrow(westData)
nrow(centralData)
dim(merged_set)
merged_set <- merged_set%>%
arrange(Row.ID)
head(merged_set)
# Replace all the empty rows with 1
merged_set <- merged_set[!apply(merged_set == '', 1, all),]
colSums(is.na(merged_set))
# Remove all the missing values
merged_data <- na.omit(merged_set)
colSums(merged_data)
colSums(is.na(merged_data))
View(merged_data)
shipping_days <- merged_data %>%
group_by(Region)%>%
summarize(shipping_time = Ship.Date - Order.Date)
shipping_days
shipping_days <- merged_data %>%
group_by(Region)%>%
summarize(shipping_time = mean(Ship.Date - Order.Date))
shipping_days
product_shipment_time <- merged_data %>%
group_by(Product.Name, Region) %>%
summarize(shipment_time = mean(Ship.Date-Order.Date)) %>%
arrange(desc(shipment_time))
head(product_shipment_time)
product_shipment_time <- merged_data %>%
group_by(Product.name) %>%
summarize(shipment_time = mean(Ship.Date-Order.Date)) %>%
arrange(desc(shipment_time))
product_shipment <- merged_data %>%
group_by(Region,Product.name) %>%
summarize(avg_shipment_days = mean(Ship.Date-Order.Date))
product_shipment <- merged_data %>%
group_by(Region,Product.Name) %>%
summarize(avg_shipment_days = mean(Ship.Date-Order.Date))
central_slowest_shipment_products <- product_shipment %>%
filter(Region == Central) %>%
arrange(desc(avg_shipment_days)) %>%
top_n(10)
central_slowest_shipment_products <- product_shipment %>%
filter(Region == 'Central') %>%
arrange(desc(avg_shipment_days)) %>%
top_n(10)
central_slowest_shipment_products
central_slowest_shipment_products <- product_shipment %>%
filter(Region == 'Central') %>%
select(Product.Name,avg_shipment_days) %>%
arrange(desc(avg_shipment_days)) %>%
top_n(10)
central_slowest_shipment_products
central_slowest_shipping_products <- product_shipment %>%
select(Product.Name,avg_shipment_days) %>%
filter(Region == 'Central') %>%
arrange(desc(avg_shipment_days)) %>%
top_n(10)
central_slowest_shipping_products
head(central_slowest_shipping_products, 10)
west_slowest_shipping_products <- product_shipment %>%
select(Product.Name,avg_shipment_days) %>%
filter(Region == 'West') %>%
arrange(desc(avg_shipment_days))
head(west_slowest_shipping_products, 10)
east_slowest_shipping_products <- product_shipment %>%
select(Product.Name,avg_shipment_days) %>%
filter(Region == 'East') %>%
arrange(desc(avg_shipment_days))
head(east_slowest_shipping_products, 10)
# Create a new column for year
# Group data by category and year, and calculate mean time_diff for each group
plotdata <- merged_data %>%
mutate(year = lubridate::year(Ship.Date),
date_diff = mean(Ship.Date-Order.Date))
head(plotdata)
class(plotdata$date_diff)
plotdata$date_diff <- as.numeric(plotdata$date_diff)
ggplot(plotdata, aes(date_diff, Category, fill = year)) +
geom_boxplot() + stat_summary(fun = mean, geom = 'point', col = "blue")+
scale_fill_brewer(palette = "Dark1") +
labs(title = "Time to Ship by Category and Year",
subtitle = "From 2015-2020",
x="Time to ship",
y="Category")
# Plot mean time_diff by category and year
ggplot(plotdata, aes(date_diff, Category, fill = year)) +
geom_boxplot() + stat_summary(fun = mean, geom = 'point', col = "blue")+
scale_fill_brewer(palette = "Dark3") +
labs(title = "Time to Ship by Category and Year",
subtitle = "From 2015-2020",
x="Time to ship",
y="Category")
# Plot mean time_diff by category and year
ggplot(plotdata, aes(date_diff, Category, fill = year)) +
geom_boxplot() + stat_summary(fun = mean, geom = 'point', col = "blue")+
scale_fill_brewer(palette = "Dark2") +
labs(title = "Time to Ship by Category and Year",
subtitle = "From 2015-2020",
x="Time to ship",
y="Category")
head(plotdata)
plotdata$date_diff <- as.numeric(plotdata$date_diff)
# Plot mean time_diff by category and year
ggplot(plotdata, aes(date_diff, Category, fill = year)) +
geom_boxplot()
plot_data <- plotdata[complete.cases(plotdata[,c('Category','date_diff')]),]
plot_data$Year <- format(plot_data$Ship.Date, format = '%Y')
ggplot(plot_data, aes(date_diff, Category, fill = Year)) + geom_boxplot() +
stat_summary(fun = mean, geom = "point", col = "black") +
scale_fill_brewer(palette = "Dark2")
merged_data$date_diff <- difftime(merged_data$Ship.Date, merged_data$Order.Date, units = "days")
plot_data <- merged_data[complete.cases(merged_data[, c('Category','date_diff')]),]
merged_data <- merged_data[complete.cases(merged_data[, c('Category','date_diff')]),]
merged_data$Year <- format(merged_data$Ship.Date, format = "%Y")
merged_data$date_diff <- difftime(merged_data$Ship.Date, merged_data$Order.Date, units = "days")
merged_data <- merged_data[complete.cases(merged_data[, c('Category','date_diff')]),]
merged_data$Year <- format(merged_data$Ship.Date, format = "%Y")
ggplot(merged_data, aes(as.numeric(date_diff), Category, fill = Year)) + geom_boxplot() +
stat_summary(fun = mean, geom = "point", col = "blue") + scale_fill_brewer(palette = "Dark2") +
labs(x = "Days", y = "Category", title = "Time to ship by Category, and Year",
subtitle = "(2015-2020)")
merged_data$date_diff <- as.numeric(merged_data$date_diff)
merged_data$date_diff <- difftime(merged_data$Ship.Date, merged_data$Order.Date, units = "days")
merged_data$date_diff <- as.numeric(merged_data$date_diff)
merged_data <- merged_data[complete.cases(merged_data[, c('Category','date_diff')]),]
merged_data$Year <- format(merged_data$Ship.Date, format = "%Y")
ggplot(merged_data, aes(date_diff, Category, fill = Year)) + geom_boxplot() +
stat_summary(fun = mean, geom = "point", col = "blue") + scale_fill_brewer(palette = "Dark2") +
labs(x = "Days", y = "Category", title = "Time to ship by Category, and Year",
subtitle = "(2015-2020)")
ggplot(merged_data, aes(date_diff, Category, fill = Year)) + geom_boxplot() +
stat_summary(fun = mean, geom = "point", col = "blue") + scale_fill_brewer(palette = "Dark4") +
labs(x = "Days", y = "Category", title = "Time to ship by Category, and Year",
subtitle = "(2015-2020)")
ggplot(merged_data, aes(date_diff, Category, fill = Year)) + geom_boxplot() +
stat_summary(fun = mean, geom = "point", col = "blue") + scale_fill_brewer(palette = "Dark3") +
labs(x = "Days", y = "Category", title = "Time to ship by Category, and Year",
subtitle = "(2015-2020)")
ggplot(merged_data, aes(date_diff, Category, fill = Year)) + geom_boxplot() +
stat_summary(fun = mean, geom = "point", col = "blue") + scale_fill_brewer(palette = "Dark5") +
labs(x = "Days", y = "Category", title = "Time to ship by Category, and Year",
subtitle = "(2015-2020)")
ggplot(merged_data, aes(date_diff, Category, fill = Year)) + geom_boxplot() +
stat_summary(fun = mean, geom = "point", col = "blue") + scale_fill_brewer(palette = 1) +
labs(x = "Days", y = "Category", title = "Time to ship by Category, and Year",
subtitle = "(2015-2020)")
profit_by_category_region <- merged_data %>%
select(Category, Profit, Region) %>%
group_by(Region) %>%
slice_max()
profit_by_category_region <- merged_data %>%
select(Category, Profit, Region) %>%
group_by(Region) %>%
slice(max(Profit))
profit_by_category_region <- merged_data %>%
select(Category, Profit, Region) %>%
group_by(Region) %>%
slice(which.max(Profit))
profit_by_category_region
lowest_profit_segments_region <-  merged_data %>%
select(Category, Profit, Region) %>%
group_by(Region) %>%
slice(which.min(Profit))
lowest_profit_segments_region
lowest_profit_segments_region <-  merged_data %>%
select(Segment, Profit, Region) %>%
group_by(Region) %>%
slice(which.min(Profit))
lowest_profit_segments_region
Sales_2015 <- merged_data %>%
select(Region, Sales, Year) %>%
group_by(Region) %>%
filter(Year == 2015)
Sales_2015
Sales_2015 <- merged_data %>%
select(Region, Sales, Year) %>%
group_by(Region) %>%
filter(Year == 2015) %>%
summarise(yearly_sales = sum(Sales))
Sales_2015
Sales_2016 <- merged_data %>%
select(Region, Sales, Year) %>%
group_by(Region) %>%
filter(Year == 2016) %>%
summarise(yearly_sales = sum(Sales))
Sales_2016
Sales_2017 <- merged_data %>%
select(Region, Sales, Year) %>%
group_by(Region) %>%
filter(Year == 2017) %>%
summarise(yearly_sales = sum(Sales))
Sales_2017
Sales_2018 <- merged_data %>%
select(Region, Sales, Year) %>%
group_by(Region) %>%
filter(Year == 2018) %>%
summarise(yearly_sales = sum(Sales))
Sales_2018
Sales_2019 <- merged_data %>%
select(Region, Sales, Year) %>%
group_by(Region) %>%
filter(Year == 2019) %>%
summarise(yearly_sales = sum(Sales))
Sales_2019
Sales_2020 <- merged_data %>%
select(Region, Sales, Year) %>%
group_by(Region) %>%
filter(Year == 2020) %>%
summarise(yearly_sales = sum(Sales))
Sales_2020
Sales_2015 <- merged_data %>%
select(Region, Sales, Year) %>%
group_by(Region) %>%
filter(Year == 2015) %>%
summarise(yearly_sales = sum(Sales))
Sales_2015
Sales_2016 <- merged_data %>%
select(Region, Sales, Year) %>%
group_by(Region) %>%
filter(Year == 2016) %>%
summarise(yearly_sales = sum(Sales))
Sales_2016
Sales_2017 <- merged_data %>%
select(Region, Sales, Year) %>%
group_by(Region) %>%
filter(Year == 2017) %>%
summarise(yearly_sales = sum(Sales))
Sales_2017
Sales_2018 <- merged_data %>%
select(Region, Sales, Year) %>%
group_by(Region) %>%
filter(Year == 2018) %>%
summarise(yearly_sales = sum(Sales))
Sales_2018
Sales_2019 <- merged_data %>%
select(Region, Sales, Year) %>%
group_by(Region) %>%
filter(Year == 2019) %>%
summarise(yearly_sales = sum(Sales))
Sales_2019
Sales_2020 <- merged_data %>%
select(Region, Sales, Year) %>%
group_by(Region) %>%
filter(Year == 2020) %>%
summarise(yearly_sales = sum(Sales))
Sales_2020
Sales_2020
Sales_2019
Sales_2015
Sales_2018
Sales_2015 <- merged_data %>%
select(Region, Sales, Year) %>%
group_by(Region) %>%
filter(Year == 2015) %>%
summarise(yearly_sales = sum(Sales))
Sales_2015
Sales_2016 <- merged_data %>%
select(Region, Sales, Year) %>%
group_by(Region) %>%
filter(Year == 2016) %>%
summarise(yearly_sales = sum(Sales))
Sales_2016
Sales_2017 <- merged_data %>%
select(Region, Sales, Year) %>%
group_by(Region) %>%
filter(Year == 2017) %>%
summarise(yearly_sales = sum(Sales))
Sales_2017
Sales_2018 <- merged_data %>%
select(Region, Sales, Year) %>%
group_by(Region) %>%
filter(Year == 2018) %>%
summarise(yearly_sales = sum(Sales))
Sales_2018
Sales_2019 <- merged_data %>%
select(Region, Sales, Year) %>%
group_by(Region) %>%
filter(Year == 2019) %>%
summarise(yearly_sales = sum(Sales))
Sales_2019
Sales_2020 <- merged_data %>%
select(Region, Sales, Year) %>%
group_by(Region) %>%
filter(Year == 2020) %>%
summarise(yearly_sales = sum(Sales))
Sales_2020
#
purchases <- merged_data %>%
select(Order.ID, Customer.Name, Product.Name, Region, Sales) %>%
filter(Sales == max(Sales))
purchases
#
region_most_purchases <- merged_data %>%
select(Order.ID, Customer.Name, Product.Name, Region, Sales) %>%
group_by(Region) %>%
filter(Sales == max(Sales))
region_most_purchases
overall_high_purchase <- merged_data %>%
select(Order.ID, Customer.Name, Product.Name, Region, Sales) %>%
filter(Sales == max(Sales))
overall_high_purchase
